#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import syd
import click
import re
import os

# -----------------------------------------------------------------------------
CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])
@click.command(context_settings=CONTEXT_SETTINGS)
@click.argument('table_name')
@click.argument('grep', nargs=-1)
@click.option('--db', default='',
              help='DB filename (SYD_DB_FILENAME environment variable is used if no filename)')

@click.option('--line_format_name', '-f', default='default',
              help='Name of the print format')

@click.option('--line_format', '-p', default='',
              help='Explicit print format')

@click.option('--print_line_format_name',
              help='Print all the available format names')

@click.option('--delete/--no-delete', '-d', default=False,
              help='Delete found elements')

@click.option('--short/--no-short', '-s', default=False,
              help='If true, only display results id (for piped commands)')

@click.option('--id', '-i', multiple=True,
              help='Only display elements with given id (maybe multiple)')

@click.option('--vv/--no-vv', default=False,
              help='Try to open in VV (only work for Image and DicomSerie)')

@click.option('--labels', '-l', default='', multiple=True,
              help='Add a label to all found elements')

def syd_find(table_name, grep, db,
             line_format_name, print_line_format_name, line_format,
             delete, short, id, vv, labels):
    '''
    FIXME

    grep: filter results. Display results that match all (AND) words given. For OR, use something like "A|B"
    '''

    # open the db
    db_filename = syd.get_db_filename(db)
    db = syd.open_db(db_filename)

    # check table exist
    tname = syd.guess_table_name(db, table_name)
    if not tname:
        print('Table {} does not exist. Tables: {}'.format(table_name, db.tables))
        exit(0)
    table_name = tname
    table = db[table_name]

    # get elements
    if len(id) == 0:
        elements = syd.find_all(table)
    else:
        elements = syd.find(table, id=id)

    if len(elements) == 0:
        exit()
        
    init_nb = len(elements)

    # only ids ? 
    if short:
        s=''
        for e in elements:
            s = s+str(e['id'])+' '
        print(s)
        exit()

    # get or create the format from the name
    if line_format == '':
        line_format = syd.tabular_get_line_format(db, table_name, line_format_name, elements[0])

    # complete the elements with sub elements (e.g. patient->name)
    line_format = syd.add_subfields_to_elements(db, table_name, elements, line_format)

    # header: list of fields
    format_headers = re.findall(r'{(.*?)[:\}]', line_format)
    header = ''
    for h in format_headers:
        header += h+' '

    # grep and get str
    elements, s = syd.grep_elements(elements, line_format, grep)

    # Add labels to elements, update and redo formating
    if len(labels) > 0:
        ids = [e.id for e in elements]
        elements = syd.find(table, id=ids)
        syd.add_labels(elements, labels)
        syd.update(db[table_name], elements)
        line_format = syd.tabular_get_line_format(db, table_name, line_format_name, elements[0])
        line_format = syd.add_subfields_to_elements(db, table_name, elements, line_format)
        elements, s = syd.grep_elements(elements, line_format, grep)

    # print everything
    print(header)
    print(s)

    # print nb found
    nb = len(elements)
    if nb == 1:
        if nb != init_nb:
            print(f'Found 1/{init_nb} element')
        else:
            print(f'Found 1 element')
    else:
        if nb != init_nb:
            print(f'Found {nb}/{init_nb} elements')
        else:
            print(f'Found {nb} elements')

    # vv ?
    if vv:
        filenames = ''        
        for e in elements:
            try:
                # if element is an Image
                filename = syd.get_image_filename(db, e)
                filenames = filenames + ' ' + filename
            except:
                try:
                    # if element is an DicomSerie
                    files = syd.get_dicom_series_files(db, e)
                    if len(files)>1:
                        filenames += ' --sequence '
                    for f in files:
                        filenames += ' ' + syd.get_file_absolute_filename(db, f)
                except:
                    filename = '' ## nothing
        if filenames != '':
            #print('vv '+filenames)
            os.system('vv '+filenames) # to be changed by subprocess

    if delete:
        ids = [i['id'] for i in elements]
        syd.delete(db[table_name], ids)
        print('Deleted',table_name, ids)


# -----------------------------------------------------------------------------
if __name__ == '__main__':
    syd_find()
